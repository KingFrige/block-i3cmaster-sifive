'use strict';

exports['amba.com'] = {
  AMBA3: {
    AHBLite: {
      r2p0_0: {
        abstractionDefinition: {
          vendor: 'amba.com',
          library: 'AMBA3',
          name: 'AHBLite_rtl',
          version: 'r2p0_0',
          busType: {
            vendor: 'amba.com',
            library: 'AMBA3',
            name: 'AHBLite',
            version: 'r2p0_0',
          },
          ports: {
            HCLK: {
              description: 'The bus clock times all bus transfers. All signal timings are related to the rising edge of HCLK.',
              wire: {
                isClock: true,
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                requiresDriver: true,
              },
            },
            HRESETn: {
              description: 'The bus reset signal is active LOW and resets the system and the bus. This is the only active LOW AHB-Lite signal.',
              wire: {
                isReset: true,
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                requiresDriver: true,
              },
            },
            HADDR: {
              description: 'The 32-bit system address bus, but the width is variable',
              wire: {
                isAddress: true,
                onMaster: {
                  presence: 'required',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            HBURST: {
              description: 'The burst type indicates if the transfer is a single transfer or forms part of a burst.Fixed length bursts of 4, 8, and 16 beats are supported. The burst can be incrementing or wrapping. Incrementing bursts of undefined length are also supported.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 3,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 3,
                  direction: 'in',
                },
              },
            },
            HMASTLOCK: {
              description: 'When HIGH, this signal indicates that the current transfer is part of a locked sequence. It has the same timing as the address and control signals.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            HPROT: {
              description: 'The protection control signals provide additional information about a bus access and are primarily intended for use by any module that wants to implement some level of protection.\nThe signals indicate if the transfer is an opcode fetch or data access, and if the transfer is a privileged mode access or user mode access. For masters with a memory management unit these signals also indicate whether the current access is cacheable or bufferable.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 4,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 4,
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            HSIZE: {
              description: 'Indicates the size of the transfer, that is typically byte, halfword, or word. The protocol allows for larger transfer sizes up to a maximum of 1024 bits.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 3,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 3,
                  direction: 'in',
                },
              },
            },
            HTRANS: {
              description: 'Indicates the transfer type of the current transfer. This can be:\n1-IDLE\n2- BUSY\n3- NONSEQUENTIAL\n4- SEQUENTIAL',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 2,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 2,
                  direction: 'in',
                },
              },
            },
            HWDATA: {
              description: 'The write data bus transfers data from the master to the slaves during write operations. A minimum data bus width of 32 bits is recommended. However, this can be extended to enable higher bandwidth operation.',
              wire: {
                isData: true,
                onMaster: {
                  presence: 'required',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            HWRITE: {
              description: 'Indicates the transfer direction. When HIGH this signal indicates a write transfer and when LOW a read transfer. It has the same timing as the address signals, however, it must remain constant throughout a burst transfer.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            HRDATA: {
              description: 'During read operations, the read data bus transfers data from the selected slave to the multiplexor. The multiplexor then transfers the data to the master. A minimum data bus width of 32 bits is recommended. However, this can be extended to enable higher bandwidth operation.',
              wire: {
                isData: true,
                onMaster: {
                  presence: 'required',
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'out',
                },
                defaultValue: 0,
              },
            },
            HREADYOUT: {
              description: 'When HIGH, the HREADYOUT signal indicates that a transfer has finished on the bus. This signal can be driven LOW to extend a transfer.',
              wire: {
                onMaster: {
                  presence: 'illegal',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
              },
            },
            HRESP: {
              description: 'The transfer response, after passing through the multiplexor, provides the master with additional information on the status of a transfer.\nWhen LOW, the HRESP signal indicates that the transfer status is OKAY.\nWhen HIGH, the HRESP signal indicates that the transfer status is ERROR.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
              },
            },
            HSELx: {
              description: 'Each AHB-Lite slave has its own slave select signal HSELx and this signal indicates that the current transfer is intended for the selected slave. When the slave is initially selected, it must also monitor the status of HREADY to ensure that the previous bus transfer has completed,before it responds to the current transfer.\nThe HSELx signal is a combinatorial decode of the address bus.',
              wire: {
                onMaster: {
                  presence: 'illegal',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            HREADY: {
              description: 'The transfer response, after passing through the multiplexor, provides the master with additional information on the status of a transfer.\nWhen LOW, the HRESP signal indicates that the transfer status is OKAY.\nWhen HIGH, the HRESP signal indicates that the transfer status is ERROR.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            HCLKEN: {
              description: 'This is an optional enable signal for HCLK domain',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                defaultValue: 1,
              },
              vendorExtensions: [],
            },
            HRUSER: {
              description: 'This is an optional read channel user signal that is not part of the official specification. The use is user specific.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'out',
                },
                defaultValue: 0,
              },
            },
            HWUSER: {
              description: 'This is an optional write channel user signal that is not part of the official specification. The use is user specific.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            HAUSER: {
              description: 'This is an optional user signal that is not part of the official specification. The use is user specific.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
          },
          description: 'The current file describes the RTL view of an AHBLite interface',
          vendorExtensions: [],
        },
      },
    },
  },
  AMBA4: {
    APB4: {
      r0p0_0: {
        abstractionDefinition: {
          vendor: 'amba.com',
          library: 'AMBA4',
          name: 'APB4_rtl',
          version: 'r0p0_0',
          busType: {
            vendor: 'amba.com',
            library: 'AMBA4',
            name: 'APB4',
            version: 'r0p0_0',
          },
          ports: {
            PCLK: {
              description: 'Clock - The rising edge of PCLK times all transfers on the APB',
              wire: {
                isClock: true,
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                requiresDriver: true,
              },
            },
            PRESETn: {
              description: 'Reset - The APB reset signal is active LOW. This signal is normally connected directly to the system bus reset signal.',
              wire: {
                isReset: true,
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                requiresDriver: true,
              },
            },
            PADDR: {
              description: 'Address - This is the APB address bus. It can be up to 32 bits wide and is driven by the peripheral bus bridge unit.',
              wire: {
                isAddress: true,
                onMaster: {
                  presence: 'required',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'in',
                },
              },
              vendorExtensions: [],
            },
            PSEL: {
              description: 'Select - The APB bridge unit generates this signal to each peripheral bus slave. It indicates that the slave device is selected and that a data transfer is required.There is a PSEL signal for each slave.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            PENABLE: {
              description: 'Enable - This signal indicates the second and subsequent cycles of an APB transfer.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            PWRITE: {
              description: 'Direction - This signal indicates an APB write access when HIGH and an APB read access when LOW.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            PRDATA: {
              description: 'Read Data - The selected slave drives this bus during read cycles when PWRITE is LOW. This bus can be up to 32-bits wide.',
              wire: {
                isData: true,
                onMaster: {
                  presence: 'required',
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'out',
                },
              },
              vendorExtensions: [],
            },
            PWDATA: {
              description: 'Write data - This bus is driven by the peripheral bus bridge unit during write cycles when PWRITE is HIGH. This bus can be up to 32 bits wide.',
              wire: {
                isData: true,
                onMaster: {
                  presence: 'required',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'in',
                },
              },
              vendorExtensions: [],
            },
            PPROT: {
              description: 'Protection type - This signal indicates the normal, privileged, or secure protection level of the transaction and whether the transaction is a data access or an instruction access.',
              wire: {
                isData: true,
                onMaster: {
                  presence: 'optional',
                  width: 3,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 3,
                  direction: 'in',
                },
              },
              vendorExtensions: [],
            },
            PSTRB: {
              description: 'Write strobes - This signal indicates which byte lanes to update during a write transfer. There is one write strobe for each eight bits of the write data bus.\nTherefore, PSTRB[n] corresponds to PWDATA[(8n + 7):(8n)]. Write strobes must not be active during a read transfer.',
              wire: {
                isData: true,
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
              },
              vendorExtensions: [],
            },
            PREADY: {
              description: 'Ready - The slave uses this signal to extend an APB transfer',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'out',
                },
                defaultValue: 1,
              },
            },
            PSLVERR: {
              description: 'This signal indicates a transfer failure. APB peripherals are not required to support the PSLVERR pin. This is true for both existing and new APB peripheral designs. Where a peripheral does not include this pin then the appropriate input to the APB bridge is tied LOW.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'out',
                },
                defaultValue: 0,
              },
            },
            PCLKEN: {
              description: 'This is an optional enable signal for PCLK domain',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                defaultValue: 1,
              },
              vendorExtensions: [],
            },
          },
          description: 'The current file describes the RTL view of an APB interface',
          vendorExtensions: [],
        },
      },
    },
    AXI4: {
      r0p0_0: {
        abstractionDefinition: {
          vendor: 'amba.com',
          library: 'AMBA4',
          name: 'AXI4_rtl',
          version: 'r0p0_0',
          busType: {
            vendor: 'amba.com',
            library: 'AMBA4',
            name: 'AXI4',
            version: 'r0p0_0',
          },
          ports: {
            ACLK: {
              description: 'Global clock signal. All signals are sampled on the rising edge of the global clock',
              wire: {
                isClock: true,
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                requiresDriver: true,
              },
            },
            ACLKEN: {
              description: 'Clock enable signal. Used as a qualifier for the ACLK signal. This signal indicates which rising edges of ACLK should be acted upon: 1 = valid rising edge of ACLK, 0 = any rising edge of ACLK should be ignored and no bus-state altered.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                defaultValue: 1,
              },
              vendorExtensions: [],
            },
            ARESETn: {
              description: 'Global reset signal. This signal is active LOW',
              wire: {
                isReset: true,
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                requiresDriver: true,
              },
            },
            AWID: {
              description: 'Write address ID. This signal is the identification tag for the write address group of signals.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            AWADDR: {
              description: 'Write address. The write address bus gives the address of the first transfer in a write burst transaction. The associated control signals are used to determine the addresses of the remaining transfers in the burst.',
              wire: {
                isAddress: true,
                onMaster: {
                  presence: 'required',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'in',
                },
              },
            },
            AWLEN: {
              description: 'Burst length. The burst length gives the exact number of transfers in a burst. This information determines the number of data transfers associated with the address.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 8,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 8,
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            AWSIZE: {
              description: 'Burst size. This signal indicates the size of each transfer in the burst. Byte lane strobes indicate exactly which byte lanes to update.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 3,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 3,
                  direction: 'in',
                },
              },
              vendorExtensions: [],
            },
            AWBURST: {
              description: 'Burst type. The burst type, coupled with the size information, details how the address for each transfer within the burst is calculated.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 2,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 2,
                  direction: 'in',
                },
                defaultValue: 1,
              },
            },
            AWLOCK: {
              description: 'Lock type. This signal provides additional information about the atomic characteristics of the transfer. The AMBA AXI4 Protocol does not support locked transfer sequences. This signal indicates an exclusive access (mapped to AxLOCK[0] from the AMBA AXI3 specification).',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            AWCACHE: {
              description: 'Cache type. This signal indicates the bufferable, cacheable, write-through, write-back, and allocate attributes of the transaction.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 4,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 4,
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            AWPROT: {
              description: 'Protection type. This signal indicates the normal, privileged, or secure protection level of the transaction and whether the transaction is a data access or an instruction access.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 3,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 3,
                  direction: 'in',
                },
              },
            },
            AWQOS: {
              description: 'Quality of service value. 4-bit QoS identifier sent on the write address channel for each write transaction',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 4,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 4,
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            AWREGION: {
              description: 'Slave region identifier sent on the read address channel for each transaction',
              wire: {
                isAddress: true,
                onMaster: {
                  presence: 'optional',
                  width: 4,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 4,
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            AWVALID: {
              description: 'Write address valid. This signal indicates that valid write address and control information are available: 1 = address and control information available, 0 = address and control information not available. The address and control information remain stable until the address acknowledge signal, AWREADY, goes HIGH.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            AWREADY: {
              description: 'Write address ready. This signal indicates that the slave is ready to accept an address and associated control signals: 1 = slave ready, 0 = slave not ready.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
              },
            },
            WID: {
              description: 'Write ID tag. This signal is the ID tag of the write data transfer. The WID value must match the AWID value of the write transaction.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 4,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 4,
                  direction: 'in',
                },
              },
            },
            WDATA: {
              description: 'Write data. The write data bus can be 8, 16, 32, 64, 128, 256, 512, or 1024 bits wide',
              wire: {
                isData: true,
                onMaster: {
                  presence: 'required',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'in',
                },
              },
              vendorExtensions: [],
            },
            WSTRB: {
              description: 'Write strobes. This signal indicates which byte lanes to update in memory. There is one write strobe for each eight bits of the write data bus. ',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'in',
                },
                defaultValue: '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF',
              },
            },
            WLAST: {
              description: 'Write last. This signal indicates the last transfer in a write burst',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            WVALID: {
              description: 'Write valid. This signal indicates that valid write data and strobes are available: 1 = write data and strobes available, 0 = write data and strobes not available.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            WREADY: {
              description: 'Write ready. This signal indicates that the slave can accept the write data: 1 = slave ready, 0 = slave not ready.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
              },
            },
            BID: {
              description: 'Response ID. The identification tag of the write response. The BID value must match the AWID value of the write transaction to which the slave is responding.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'out',
                },
              },
            },
            BRESP: {
              description: 'Write response. This signal indicates the status of the write transaction. The allowable responses are OKAY, EXOKAY, SLVERR, and DECERR.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 2,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 2,
                  direction: 'out',
                },
                defaultValue: 0,
              },
            },
            BVALID: {
              description: 'Write response valid. This signal indicates that a valid write response is available: 1 = write response available, 0 = write response not available.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
              },
            },
            BREADY: {
              description: 'Response ready. This signal indicates that the master can accept the response information. 1 = master ready, 0 = master not ready.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            ARID: {
              description: 'Read address ID. This signal is the identification tag for the read address group of signals.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            ARADDR: {
              description: 'Read address. The read address bus gives the initial address of a read burst transaction. Only the start address of the burst is provided and the control signals that are issued alongside the address detail how the address is calculated for the remaining transfers in the burst.',
              wire: {
                isAddress: true,
                onMaster: {
                  presence: 'required',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            ARLEN: {
              description: 'Burst length. The burst length gives the exact number of transfers in a burst. This information determines the number of data transfers associated with the address.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 8,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 8,
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            ARSIZE: {
              description: 'Burst size. This signal indicates the size of each transfer in the burst',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 3,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 3,
                  direction: 'in',
                },
              },
              vendorExtensions: [],
            },
            ARBURST: {
              description: 'Burst type. The burst type, coupled with the size information, details how the address for each transfer within the burst is calculated.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 2,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 2,
                  direction: 'in',
                },
                defaultValue: 1,
              },
            },
            ARLOCK: {
              description: 'Lock type. This signal provides additional information about the atomic characteristics of the transfer. The AMBA AXI4 Protocol does not support locked transfer sequences. This signal indicates an exclusive access (mapped to AxLOCK[0] from the AMBA AXI3 specification).',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            ARCACHE: {
              description: 'Cache type. This signal provides additional information about the cacheable characteristics of the transfer.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 4,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 4,
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            ARPROT: {
              description: 'Protection type. This signal provides protection unit information for the transaction',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 3,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 3,
                  direction: 'in',
                },
              },
            },
            ARQOS: {
              description: 'Quality of service value. 4-bit QoS identifier sent on the write address channel for each read transaction',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 4,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 4,
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            ARREGION: {
              description: 'Slave region identifier sent on the read address channel for each transaction',
              wire: {
                isAddress: true,
                onMaster: {
                  presence: 'optional',
                  width: 4,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 4,
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            ARVALID: {
              description: 'Read address valid. This signal indicates, when HIGH, that the read address and control information is valid and will remain stable until the address acknowledge signal, ARREADY, is high.\n1 = address and control information valid, 0 = address and control information not valid.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            ARREADY: {
              description: 'Read address ready. This signal indicates that the slave is ready to accept an address and associated control signals: 1 = slave ready, 0 = slave not ready.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
              },
            },
            RID: {
              description: 'Read ID tag. This signal is the ID tag of the read data group of signals. The RID value is generated by the slave and must match the ARID value of the read transaction to which it is responding.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'out',
                },
              },
            },
            RDATA: {
              description: 'Read data. The read data bus can be 8, 16, 32, 64, 128, 256, 512, or 1024 bits wide',
              wire: {
                isData: true,
                onMaster: {
                  presence: 'required',
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'out',
                },
              },
              vendorExtensions: [],
            },
            RRESP: {
              description: 'Read response. This signal indicates the status of the read transfer. The allowable responses are OKAY, EXOKAY, SLVERR, and DECERR.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 2,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 2,
                  direction: 'out',
                },
                defaultValue: 0,
              },
            },
            RLAST: {
              description: 'Read last. This signal indicates the last transfer in a read burst',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
              },
            },
            RVALID: {
              description: 'Read valid. This signal indicates that the required read data is available and the read transfer can complete: 1 = read data available, 0 = read data not available.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
              },
            },
            RREADY: {
              description: 'Read ready. This signal indicates that the master can accept the read data and response information: 1= master ready, 0 = master not ready.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            AWUSER: {
              description: 'Write Address User. This signal provides sideband signals on the write address channel which are valid at the same time as the other AW signals. Use of the AWUSER signal is implementation specific.',
              isUser: true,
              group: 'AW',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            WUSER: {
              description: 'Write User. This signal provides sideband signals on the write channel which are valid at the same time as the other W signals. Use of the WUSER signal is implementation specific.',
              isUser: true,
              group: 'W',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            BUSER: {
              description: 'Write Response User. This signal provides sideband signals on the write response channel which are valid at the same time as the other B signals. Use of the BUSER signal is implementation specific.',
              isUser: true,
              group: 'B',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'out',
                },
                defaultValue: 0,
              },
            },
            ARUSER: {
              description: 'Read Address User. This signal provides sideband signals on the read address channel which are valid at the same time as the other AR signals. Use of the ARUSER signal is implementation specific.',
              isUser: true,
              group: 'AR',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            RUSER: {
              description: 'Read User. This signal provides sideband signals on the read channel which are valid at the same time as the other R signals. Use of the RUSER signal is implementation specific.',
              isUser: true,
              group: 'R',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'out',
                },
                defaultValue: 0,
              },
            },
          },
          description: 'This defines the signals when implementing an AXI4 interface on RTL views.',
          props: {
            maxBurst: {
              type: 'integer',
              title: 'Maximum burst length',
              description: 'Maximum burst length supported by implementation [unit: Transfers (Beats)]',
              minimum: 1,
              maximum: 256,
              default: 16,
            },
          },
        },
      },
    },
    'AXI4-Lite': {
      r0p0_0: {
        abstractionDefinition: {
          vendor: 'amba.com',
          library: 'AMBA4',
          name: 'AXI4-Lite_rtl',
          version: 'r0p0_0',
          busType: {
            vendor: 'amba.com',
            library: 'AMBA4',
            name: 'AXI4-Lite',
            version: 'r0p0_0',
          },
          ports: {
            ACLK: {
              description: 'Global clock signal. All signals are sampled on the rising edge of the global clock',
              wire: {
                isClock: true,
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                requiresDriver: true,
              },
            },
            ACLKEN: {
              description: 'Clock enable signal. Used as a qualifier for the ACLK signal. This signal indicates which rising edges of ACLK should be acted upon: 1 = valid rising edge of ACLK, 0 = any rising edge of ACLK should be ignored and no bus-state altered.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                defaultValue: 1,
              },
              vendorExtensions: [],
            },
            ARESETn: {
              description: 'Global reset signal. This signal is active LOW',
              wire: {
                isReset: true,
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                requiresDriver: true,
              },
            },
            AWADDR: {
              description: 'Write address. The write address bus gives the address of the first transfer in a write burst transaction. The associated control signals are used to determine the addresses of the remaining transfers in the burst.',
              wire: {
                isAddress: true,
                onMaster: {
                  presence: 'required',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'in',
                },
              },
            },
            AWPROT: {
              description: 'Protection type. This signal indicates the normal, privileged, or secure protection level of the transaction and whether the transaction is a data access or an instruction access.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 3,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 3,
                  direction: 'in',
                },
              },
            },
            AWVALID: {
              description: 'Write address valid. This signal indicates that valid write address and control information are available: 1 = address and control information available, 0 = address and control information not available. The address and control information remain stable until the address acknowledge signal, AWREADY, goes HIGH.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            AWREADY: {
              description: 'Write address ready. This signal indicates that the slave is ready to accept an address and associated control signals: 1 = slave ready, 0 = slave not ready.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
              },
            },
            WDATA: {
              description: 'Write data. The write data bus can be 8, 16, 32, 64, 128, 256, 512, or 1024 bits wide',
              wire: {
                isData: true,
                onMaster: {
                  presence: 'required',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'in',
                },
              },
              vendorExtensions: [],
            },
            WSTRB: {
              description: 'Write strobes. This signal indicates which byte lanes to update in memory. There is one write strobe for each eight bits of the write data bus. ',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'in',
                },
                defaultValue: '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF',
              },
            },
            WVALID: {
              description: 'Write valid. This signal indicates that valid write data and strobes are available: 1 = write data and strobes available, 0 = write data and strobes not available.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            WREADY: {
              description: 'Write ready. This signal indicates that the slave can accept the write data: 1 = slave ready, 0 = slave not ready.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
              },
            },
            BRESP: {
              description: 'Write response. This signal indicates the status of the write transaction. The allowable responses are OKAY, EXOKAY, SLVERR, and DECERR.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 2,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 2,
                  direction: 'out',
                },
                defaultValue: 0,
              },
            },
            BVALID: {
              description: 'Write response valid. This signal indicates that a valid write response is available: 1 = write response available, 0 = write response not available.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
              },
            },
            BREADY: {
              description: 'Response ready. This signal indicates that the master can accept the response information. 1 = master ready, 0 = master not ready.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            ARADDR: {
              description: 'Read address. The read address bus gives the initial address of a read burst transaction. Only the start address of the burst is provided and the control signals that are issued alongside the address detail how the address is calculated for the remaining transfers in the burst.',
              wire: {
                isAddress: true,
                onMaster: {
                  presence: 'required',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            ARPROT: {
              description: 'Protection type. This signal provides protection unit information for the transaction',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 3,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 3,
                  direction: 'in',
                },
              },
            },
            ARVALID: {
              description: 'Read address valid. This signal indicates, when HIGH, that the read address and control information is valid and will remain stable until the address acknowledge signal, ARREADY, is high.\n1 = address and control information valid, 0 = address and control information not valid.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            ARREADY: {
              description: 'Read address ready. This signal indicates that the slave is ready to accept an address and associated control signals: 1 = slave ready, 0 = slave not ready.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
              },
            },
            RDATA: {
              description: 'Read data. The read data bus can be 8, 16, 32, 64, 128, 256, 512, or 1024 bits wide',
              wire: {
                isData: true,
                onMaster: {
                  presence: 'required',
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  direction: 'out',
                },
              },
              vendorExtensions: [],
            },
            RRESP: {
              description: 'Read response. This signal indicates the status of the read transfer. The allowable responses are OKAY, EXOKAY, SLVERR, and DECERR.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 2,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 2,
                  direction: 'out',
                },
                defaultValue: 0,
              },
            },
            RVALID: {
              description: 'Read valid. This signal indicates that the required read data is available and the read transfer can complete: 1 = read data available, 0 = read data not available.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
              },
            },
            RREADY: {
              description: 'Read ready. This signal indicates that the master can accept the read data and response information: 1= master ready, 0 = master not ready.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            AWUSER: {
              description: 'Write Address User. This signal provides sideband signals on the write address channel which are valid at the same time as the other AW signals. Use of the AWUSER signal is implementation specific.',
              isUser: true,
              group: 'AW',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            WUSER: {
              description: 'Write User. This signal provides sideband signals on the write channel which are valid at the same time as the other W signals. Use of the WUSER signal is implementation specific.',
              isUser: true,
              group: 'W',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            BUSER: {
              description: 'Write Response User. This signal provides sideband signals on the write response channel which are valid at the same time as the other B signals. Use of the BUSER signal is implementation specific.',
              isUser: true,
              group: 'B',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'out',
                },
                defaultValue: 0,
              },
            },
            ARUSER: {
              description: 'Read Address User. This signal provides sideband signals on the read address channel which are valid at the same time as the other AR signals. Use of the ARUSER signal is implementation specific.',
              isUser: true,
              group: 'AR',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            RUSER: {
              description: 'Read User. This signal provides sideband signals on the read channel which are valid at the same time as the other R signals. Use of the RUSER signal is implementation specific.',
              isUser: true,
              group: 'R',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'out',
                },
                defaultValue: 0,
              },
            },
          },
          description: 'This defines the signals when implementing an AXI4 interface on RTL views.',
          vendorExtensions: [],
        },
      },
    },
    AXI4Stream: {
      r0p0_1: {
        abstractionDefinition: {
          vendor: 'amba.com',
          library: 'AMBA4',
          name: 'AXI4Stream_rtl',
          version: 'r0p0_1',
          busType: {
            vendor: 'amba.com',
            library: 'AMBA4',
            name: 'AXI4Stream',
            version: 'r0p0_1',
          },
          ports: {
            ACLK: {
              description: 'Global clock signal. All signals are sampled on the rising edge of the global clock',
              wire: {
                isClock: true,
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                requiresDriver: true,
              },
            },
            ACLKEN: {
              description: 'Clock enable signal. Used as a qualifier for the ACLK signal',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                defaultValue: 1,
              },
              vendorExtensions: [],
            },
            ARESETn: {
              description: 'Global reset signal. This signal is active LOW',
              wire: {
                isReset: true,
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                requiresDriver: true,
              },
            },
            TVALID: {
              description: 'This signal indicates that the master is driving a valid transfer. A transfer takes place when both TVALID and TREADY are asserted.',
              wire: {
                onMaster: {
                  presence: 'required',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'required',
                  width: 1,
                  direction: 'in',
                },
              },
            },
            TREADY: {
              description: 'This signal indicates that the slave can accept  a transfer in the current cycle.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'out',
                },
                defaultValue: 1,
              },
            },
            TDATA: {
              description: 'This bus is the primary payload that is used to provide the data that is passing across the interface. The width of the data payload is an integer number of bytes.',
              wire: {
                isData: true,
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            TSTRB: {
              description: 'TSTRB is the byte qualifier that indicates whether the content of the associated byte of TDATA is processed as a data byte of position byte. \n            When TSTRB is absent and TKEEP is present, TSTRB defaults to TKEEP.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
              },
              vendorExtensions: [],
            },
            TKEEP: {
              description: 'TKEEP is the byte qualifier that indicates whether the content of the associated byte of TDATA is processed as a data stream. Associated bytes that have the TKEEP byte qualifier deasserted are null bytes and can be removed from the data stream. ',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
              },
              vendorExtensions: [],
            },
            TLAST: {
              description: 'This signal indicates the boundary of a packet.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  width: 1,
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  width: 1,
                  direction: 'in',
                },
                defaultValue: 1,
              },
            },
            TID: {
              description: 'This is used as data stream identifier that indicates different streams of data.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            TDEST: {
              description: 'This signal provides routing information for the data stream.',
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
            TUSER: {
              description: 'TUSER is user defined sideband information that can be transmitted alongside the data stream.',
              isUser: true,
              wire: {
                onMaster: {
                  presence: 'optional',
                  direction: 'out',
                },
                onSlave: {
                  presence: 'optional',
                  direction: 'in',
                },
                defaultValue: 0,
              },
            },
          },
          description: 'AMBA AXI4-Stream Protocol Specification v1.0',
          vendorExtensions: [],
        },
      },
    },
  },
};

exports['intel.com'] = {
  PHY: {
    PIPE: {
      '4.4.0': {
        abstractionDefinition: {
          vendor: 'intel.com',
          library: 'PHY',
          name: 'PIPE_rtl',
          version: '4.4.0',
          busType: {
            vendor: 'intel.com',
            library: 'PHY',
            name: 'PIPE',
            version: '4.4.0',
          },
          ports: {
            CLK: {
              description: 'Used to generate the bit-rate clock for the PHY TX and RX',
              wire: {
                qualifier: {
                  isClock: 'true',
                },
                onMaster: {
                  direction: 'in',
                  width: 1,
                },
                onSlave: {
                  direction: 'in',
                  width: 1,
                },
                requiresDriver: 'true',
              },
            },
            PCLK: {
              description: 'Parallel interface clock',
              wire: {
                qualifier: {
                  isClock: 'true',
                },
                onMaster: {
                  direction: 'in',
                  width: 1,
                },
                onSlave: {
                  direction: 'out',
                  width: 1,
                },
                requiresDriver: 'true',
              },
            },
            RESETN: {
              description: 'Resets the transmitter and receiver.',
              wire: {
                onMaster: {
                  direction: 'out',
                  width: 1,
                },
                onSlave: {
                  direction: 'in',
                  width: 1,
                },
              },
            },
            POWERDOWN: {
              description: 'Forces TX output to electrical idle',
              wire: {
                onMaster: {
                  direction: 'out',
                  width: 2,
                },
                onSlave: {
                  direction: 'in',
                  width: 2,
                },
              },
            },
            RATE: {
              description: 'Link signalling rate',
              wire: {
                onMaster: {
                  direction: 'out',
                  width: 2,
                },
                onSlave: {
                  direction: 'in',
                  width: 2,
                },
              },
            },
            TXMARGIN: {
              description: 'Selects transmitter voltage level',
              wire: {
                onMaster: {
                  direction: 'out',
                  width: 3,
                },
                onSlave: {
                  direction: 'in',
                  width: 3,
                },
              },
            },
            TXSWING: {
              description: 'Transmitter voltage swing level',
              wire: {
                onMaster: {
                  direction: 'out',
                  width: 1,
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  width: 1,
                  presence: 'optional',
                },
              },
            },
            BLKALNCTRL: {
              description: 'Block align control, controls whether the PHY performs block alignment',
              wire: {
                onMaster: {
                  direction: 'out',
                  width: 1,
                },
                onSlave: {
                  direction: 'in',
                  width: 1,
                },
              },
            },
            WIDTH: {
              description: 'Controls the PIPE datapath width',
              wire: {
                onMaster: {
                  direction: 'out',
                  width: 2,
                },
                onSlave: {
                  direction: 'in',
                  width: 2,
                },
              },
            },
            PCLKRATE: {
              description: 'Controls the PIPE PCLK rate',
              wire: {
                onMaster: {
                  direction: 'out',
                  width: 3,
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  width: 3,
                  presence: 'optional',
                },
              },
            },
            TXDATA: {
              description: 'Parallel data input bus',
              wire: {
                onMaster: {
                  direction: 'out',
                },
                onSlave: {
                  direction: 'in',
                },
              },
            },
            TXDATAVALID: {
              description: 'Parallel data valid signal',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            RXDATA: {
              description: 'Parallel data output bus',
              wire: {
                onMaster: {
                  direction: 'in',
                },
                onSlave: {
                  direction: 'out',
                },
              },
            },
            PHYMODE: {
              description: 'PHY operating mode',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            SRISEN: {
              description: 'Used to tell the PHY to configure itselff to support SRIS ',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            TXDETRXLPBK: {
              description: 'Used to tell the PHY to begin receiver detection or loopback ',
              wire: {
                onMaster: {
                  direction: 'out',
                },
                onSlave: {
                  direction: 'in',
                },
              },
            },
            TXELECIDLE: {
              description: 'Forces TX output to electrical idle',
              wire: {
                onMaster: {
                  direction: 'out',
                },
                onSlave: {
                  direction: 'in',
                },
              },
            },
            RXTERM: {
              description: 'Controls presence of receiver terminations',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            RXSTANDBY: {
              description: 'Controls whether the PHY RX is active when the PHY is in P0 or POs',
              wire: {
                onMaster: {
                  direction: 'out',
                },
                onSlave: {
                  direction: 'in',
                },
              },
            },
            RXPOLARITY: {
              description: 'Tells PHY to invert the received data polarity',
              wire: {
                onMaster: {
                  direction: 'out',
                },
                onSlave: {
                  direction: 'in',
                },
              },
            },
            RXSTANDBYST: {
              description: 'Indicateds PHY RX Standby state',
              wire: {
                onMaster: {
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'out',
                  presence: 'optional',
                },
              },
            },
            PCLKCHNGACK: {
              description: 'Asserted by the MAC when a PCLK rate change is complete and stable',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            ASYNCPWRCHNGACK: {
              description: 'After the PHY asserts PhyStatus, the MAC responds with this',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            RXVALID: {
              description: 'Parallel data valid signal',
              wire: {
                onMaster: {
                  direction: 'in',
                },
                onSlave: {
                  direction: 'out',
                },
              },
            },
            PHYSTATUS: {
              description: 'Used to communicate completion of several PHY functions',
              wire: {
                onMaster: {
                  direction: 'in',
                },
                onSlave: {
                  direction: 'out',
                },
              },
            },
            RXELECIDLE: {
              description: 'Indicates receiver detection of the electrical idle',
              wire: {
                onMaster: {
                  direction: 'in',
                },
                onSlave: {
                  direction: 'out',
                },
              },
            },
            RXSTATUS: {
              description: 'RX status',
              wire: {
                onMaster: {
                  direction: 'in',
                },
                onSlave: {
                  direction: 'out',
                },
              },
            },
            PCLKCHNGOK: {
              description: 'Indicates that PHY is ready for the MACto change PCLK rate',
              wire: {
                onMaster: {
                  direction: 'in',
                },
                onSlave: {
                  direction: 'out',
                },
              },
            },
            M2PMSGBUS: {
              description: 'MAC to PHY message bus',
              wire: {
                onMaster: {
                  direction: 'out',
                },
                onSlave: {
                  direction: 'in',
                },
              },
            },
            P2MMSGBUS: {
              description: 'PHY to MAC message bus',
              wire: {
                onMaster: {
                  direction: 'in',
                },
                onSlave: {
                  direction: 'out',
                },
              },
            },
            TXDATAK: {
              description: 'data/control switch for the transmit symbols',
              wire: {
                onMaster: {
                  direction: 'out',
                },
                onSlave: {
                  direction: 'in',
                },
              },
            },
            TXSTARTBLCK: {
              description: 'This is a way for MAC to label a starting byte of a 128 byte block',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            RXDATAK: {
              description: 'data/control switch for the receive symbols',
              wire: {
                onMaster: {
                  direction: 'in',
                },
                onSlave: {
                  direction: 'out',
                },
              },
            },
            RXDATAVALID: {
              description: 'PHY to MAC data valid',
              wire: {
                onMaster: {
                  direction: 'in',
                },
                onSlave: {
                  direction: 'out',
                },
              },
            },
            RXSTARTBLCK: {
              description: 'This is a way for PHY to label a starting byte of a 128 byte block',
              wire: {
                onMaster: {
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'out',
                  presence: 'optional',
                },
              },
            },
            TXCOMP: {
              description: 'TX compliance, sets the running disparity to negative when transmitting PCI Express compliance pattern',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            TXSYNCHDR: {
              description: 'Provides a sync header  for PHY to use in the next 130b block',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            RXSYNCHDR: {
              description: 'Provides a sync header  for MAC to use in the next 130b block',
              wire: {
                onMaster: {
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'out',
                  presence: 'optional',
                },
              },
            },
            ENCDECBYPASS: {
              description: '8b/10b bypass',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            RXPRESETHINT: {
              description: 'Provides the RX preset hint to the receiver',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            LEFFM: {
              description: 'Link Equalization Feedback Figure of Merit value',
              wire: {
                onMaster: {
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'out',
                  presence: 'optional',
                },
              },
            },
            LEFDC: {
              description: 'Link Equalization Feedback Direction Change',
              wire: {
                onMaster: {
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'out',
                  presence: 'optional',
                },
              },
            },
            INVALIDREQ: {
              description: 'Indication that requested TX EQ setting was out of range',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            RXSTARTBHIGH: {
              description: 'PLDA controller specific signal, used at 16 GT/s only, when PIPE interface is 64 bits wide. Valid when RXSTARTBLOCK is valid, and indicates if block starts on lower (0) or higher (1) 32 bits of RXDATA',
              wire: {
                onMaster: {
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'out',
                  presence: 'optional',
                },
              },
            },
            PLLRATE: {
              description: 'PLDA controller specific signal, seem to be the same as PCLKRATE. Only used when PCLK is an input to the PHY',
              wire: {
                onMaster: {
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'out',
                  presence: 'optional',
                },
              },
            },
            PLLACK: {
              description: 'PLDA controller specific signal, PCLKRATE change acknowledge. Only used when PCLK is an input to the PHY',
              wire: {
                onMaster: {
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'out',
                  presence: 'optional',
                },
              },
            },
            RXEIDETECTDISABLE: {
              description: 'Asynchronously disables the RX Electrical Idle detect logic',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            TXCOMMONMODEDISABLE: {
              description: 'Asynchronously disables the transmitter DC common mode logic',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            RXEQTRAINING: {
              description: 'RX to bypass normal operation to perform equalization training. USB only.',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            TXONESZEROS: {
              description: 'Used to instruct the receiver to bypass normal operation to perform equalization training. USB only.',
              wire: {
                onMaster: {
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            TXPATTERN: {
              description: 'Controls which pattern the PHY sends. SATA only.',
              wire: {
                onMaster: {
                  direction: 'out',
                  width: 2,
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'in',
                  width: 2,
                  presence: 'optional',
                },
              },
            },
            ALIGNDETECT: {
              description: 'Indicates receiver detection of an Align. SATA only.',
              wire: {
                onMaster: {
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'out',
                  presence: 'optional',
                },
              },
            },
          },
        },
      },
    },
  },
};

exports['sifive.com'] = {
  MEM: {
    DPRAM: {
      '0.1.0': {
        abstractionDefinition: {
          vendor: 'sifive.com',
          library: 'MEM',
          name: 'DPRAM_rtl',
          version: '0.1.0',
          busType: {
            vendor: 'sifive.com',
            library: 'MEM',
            name: 'DPRAM',
            version: '0.1.0',
          },
          ports: {
            WRCLK: {
              description: 'Write clock',
              requiresDriver: true,
              isClock: true,
              wire: {
                onMaster: {
                  width: 1,
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  width: 1,
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            RDCLK: {
              description: 'Read clock',
              requiresDriver: true,
              isClock: true,
              wire: {
                onMaster: {
                  width: 1,
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  width: 1,
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            WREN: {
              description: 'Write enable',
              wire: {
                onMaster: {
                  width: 1,
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 1,
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            RDEN: {
              description: 'Read enable',
              wire: {
                onMaster: {
                  width: 1,
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 1,
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            BEN: {
              description: 'Byte enable',
              wire: {
                onMaster: {
                  width: 'BEN_WIDTH',
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  width: 'BEN_WIDTH',
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            WRADDR: {
              description: 'Write port address',
              wire: {
                onMaster: {
                  width: 'ADDR_WIDTH',
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 'ADDR_WIDTH',
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            WRDATA: {
              description: 'Write port data',
              wire: {
                onMaster: {
                  width: 'DATA_WIDTH',
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 'DATA_WIDTH',
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            RDADDR: {
              description: 'Read port address',
              wire: {
                onMaster: {
                  width: 'ADDR_WIDTH',
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 'ADDR_WIDTH',
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            RDDATA: {
              description: 'Read port data',
              wire: {
                onMaster: {
                  width: 'DATA_WIDTH',
                  direction: 'in',
                  presence: 'required',
                },
                onSlave: {
                  width: 'DATA_WIDTH',
                  direction: 'out',
                  presence: 'required',
                },
              },
            },
            RDERR: {
              description: 'If ECC feature is present, this signals that an undorrectable error was detected on the read data',
              wire: {
                onMaster: {
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'out',
                  presence: 'optional',
                },
              },
            },
          },
        },
      },
    },
    SPRAM: {
      '0.1.0': {
        abstractionDefinition: {
          vendor: 'sifive.com',
          library: 'MEM',
          name: 'SPRAM_rtl',
          version: '0.1.0',
          busType: {
            vendor: 'sifive.com',
            library: 'MEM',
            name: 'SPRAM',
            version: '0.1.0',
          },
          ports: {
            CLK: {
              description: 'Memory clock',
              requiresDriver: true,
              isClock: true,
              wire: {
                onMaster: {
                  width: 1,
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  width: 1,
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            WREN: {
              description: 'Write enable',
              wire: {
                onMaster: {
                  width: 1,
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 1,
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            RDEN: {
              description: 'Read enable',
              wire: {
                onMaster: {
                  width: 1,
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 1,
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            BEN: {
              description: 'Byte enable',
              wire: {
                onMaster: {
                  width: 'BEN_WIDTH',
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  width: 'BEN_WIDTH',
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            ADDR: {
              description: 'Read / Write port address',
              wire: {
                onMaster: {
                  width: 'ADDR_WIDTH',
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 'ADDR_WIDTH',
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            WRDATA: {
              description: 'Write port data',
              wire: {
                onMaster: {
                  width: 'DATA_WIDTH',
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 'DATA_WIDTH',
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            RDDATA: {
              description: 'Read port data',
              wire: {
                onMaster: {
                  width: 'DATA_WIDTH',
                  direction: 'in',
                  presence: 'required',
                },
                onSlave: {
                  width: 'DATA_WIDTH',
                  direction: 'out',
                  presence: 'required',
                },
              },
            },
            RDERR: {
              description: 'If ECC feature is present, this signals that an undorrectable error was detected on the read data',
              wire: {
                onMaster: {
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  direction: 'out',
                  presence: 'optional',
                },
              },
            },
          },
        },
      },
    },
  },
  SCIE: {
    decoder: {
      '0.1.0': {
        abstractionDefinition: {
          vendor: 'sifive.com',
          library: 'SCIE',
          name: 'decoder_rtl',
          version: '0.1.0',
          busType: {
            vendor: 'sifive.com',
            library: 'SCIE',
            name: 'decoder',
            version: '0.1.0',
          },
          ports: {
            insn: {
              description: 'instruction word',
              wire: {
                onMaster: {
                  width: 32,
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 32,
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            unpipelined: {
              description: 'unpipelined unit to be used',
              wire: {
                onMaster: {
                  width: 1,
                  direction: 'in',
                  presence: 'required',
                },
                onSlave: {
                  width: 1,
                  direction: 'out',
                  presence: 'required',
                },
              },
            },
            pipelined: {
              description: 'pipelined unit to be used',
              wire: {
                onMaster: {
                  width: 1,
                  direction: 'in',
                  presence: 'required',
                },
                onSlave: {
                  width: 1,
                  direction: 'out',
                  presence: 'required',
                },
              },
            },
          },
        },
      },
    },
    pipelined: {
      '0.1.0': {
        abstractionDefinition: {
          vendor: 'sifive.com',
          library: 'SCIE',
          name: 'pipelined_rtl',
          version: '0.1.0',
          busType: {
            vendor: 'sifive.com',
            library: 'SCIE',
            name: 'pipelined',
            version: '0.1.0',
          },
          ports: {
            clock: {
              description: 'Must be used to clock a positive-edge-triggered pipeline register. The functional unit must contain exactly one stage of pipeline register. for two-cycle SCIE only.',
              isClock: true,
              wire: {
                onMaster: {
                  width: 1,
                  direction: 'in',
                  presence: 'optional',
                },
                onSlave: {
                  width: 1,
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            valid: {
              description: 'An active-high signal is also provided so that the unit may gate the clock of its pipeline register to save power. The signal may be safely ignored.',
              wire: {
                onMaster: {
                  width: 1,
                  direction: 'out',
                  presence: 'optional',
                },
                onSlave: {
                  width: 1,
                  direction: 'in',
                  presence: 'optional',
                },
              },
            },
            insn: {
              description: 'instruction word',
              wire: {
                onMaster: {
                  width: 32,
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 32,
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            rs1: {
              description: 'rs1 value',
              wire: {
                onMaster: {
                  width: 32,
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 32,
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            rs2: {
              description: 'rs2 value',
              wire: {
                onMaster: {
                  width: 32,
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 32,
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            rd: {
              description: 'rd value',
              wire: {
                onMaster: {
                  width: 32,
                  direction: 'in',
                  presence: 'required',
                },
                onSlave: {
                  width: 32,
                  direction: 'out',
                  presence: 'required',
                },
              },
            },
          },
        },
      },
    },
    unpipelined: {
      '0.1.0': {
        abstractionDefinition: {
          vendor: 'sifive.com',
          library: 'SCIE',
          name: 'unpipelined_rtl',
          version: '0.1.0',
          busType: {
            vendor: 'sifive.com',
            library: 'SCIE',
            name: 'unpipelined',
            version: '0.1.0',
          },
          ports: {
            insn: {
              description: 'instruction word',
              wire: {
                onMaster: {
                  width: 32,
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 32,
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            rs1: {
              description: 'rs1 value',
              wire: {
                onMaster: {
                  width: 32,
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 32,
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            rs2: {
              description: 'rs2 value',
              wire: {
                onMaster: {
                  width: 32,
                  direction: 'out',
                  presence: 'required',
                },
                onSlave: {
                  width: 32,
                  direction: 'in',
                  presence: 'required',
                },
              },
            },
            rd: {
              description: 'rd value',
              wire: {
                onMaster: {
                  width: 32,
                  direction: 'in',
                  presence: 'required',
                },
                onSlave: {
                  width: 32,
                  direction: 'out',
                  presence: 'required',
                },
              },
            },
          },
        },
      },
    },
  },
};
